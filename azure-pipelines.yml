trigger:
  - master

pr:
  - master

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: "build"
    displayName: "Build"
    jobs:
      - job: "build"
        displayName: "Build artifacts"
        steps:
          - task: DotNetCoreCLI@2
            displayName: "Restore solution"
            inputs:
              command: "restore"
              projects: "**/*.csproj"
              feedsToUse: "select"
          - task: DotNetCoreCLI@2
            displayName: "Build project"
            inputs:
              command: "build"
              projects: |
                **/*.csproj
                !**/*.unit.csproj
              arguments: "--no-restore -c Release"
          - task: CopyFiles@2
            displayName: "Stage build output"
            inputs:
              SourceFolder: "$(Build.SourcesDirectory)/ml.playground.api/bin/Release/netcoreapp3.1/"
              Contents: "**"
              TargetFolder: "$(Build.ArtifactStagingDirectory)/bin"
          - task: PublishBuildArtifacts@1
            displayName: "Publish ASP.Net Core application"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/bin"
              ArtifactName: "bin"
              publishLocation: "Container"
      - job: "test"
        displayName: "Run tests"
        steps:
          - task: DotNetCoreCLI@2
            displayName: "Restore solution"
            inputs:
              command: "restore"
              projects: "**/*.csproj"
              feedsToUse: "select"
          - task: DotNetCoreCLI@2
            displayName: "Run unit tests"
            inputs:
              command: "test"
              projects: "**/*.unit.csproj"
              arguments: "--no-restore"
  - stage: "deploy"
    displayName: "Deploy"
    condition: ne(variables['Build.Reason'], 'PullRequest')
    jobs:
      - job: "production"
        displayName: "Production environment"
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        steps: 
          - task: Docker@2
            displayName: "Authenticate with Docker registry"
            inputs:
              containerRegistry: 'DevOps.Playground Registry'
              command: 'login'
          - script: |
              docker build -t devopsplayground.azurecr.io/aspnetcore:latest \
                -f $(Build.SourcesDirectory)/Dockerfile $(Build.SourcesDirectory)/
              docker push devopsplayground.azurecr.io/aspnetcore:latest
            displayName: "Build and push the Docker image"
          - task: KubernetesManifest@0
            displayName: "Deploy the pushed image to Kubernetes"
            inputs:
              action: "deploy"
              kubernetesServiceConnection: "DevOps.Playground Cluster"
              manifests: "**/deployment.yml"
          - task: Kubernetes@1
            displayName: "Roll-out the updated image in Kubernetes"
            inputs:
              connectionType: "Kubernetes Service Connection"
              kubernetesServiceEndpoint: "DevOps.Playground Cluster"
              command: "rollout"
              arguments: "restart deployment/aspnetcore"
          - task: Kubernetes@1
            displayName: "Annotate the rolled-out deployment"
            inputs:
              connectionType: "Kubernetes Service Connection"
              kubernetesServiceEndpoint: "DevOps.Playground Cluster"
              command: "annotate"
              arguments: 'deployment/aspnetcore kubernetes.io/change-cause="$(Build.DefinitionName) run $(Build.BuildNumber)"'  